View(Cars93)
library(MASS)
data("Cars93")
data.df = data("Cars93")
data.df
data.df = data(Cars93)
data.df
?summary
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
data.df = data(Cars93)
data.df
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
data(Cars93)
View(Cars93)
summary(Cars93)
summary(Cars93)
nrow(Cars93)
summary(Cars93)
nrow(Cars93)
,ыгиыуе
?subset
View(Cars93)
Cars93 <- cbind(Cars93, distances =Cars93$MPG.highway*Cars93$Fuel.tank.capacity)
max<-Cars93[Cars93$distances== max(Cars93$distances) ,]
medium<-Cars93[Cars93$distances== median(Cars93$distances) ,]
min<-Cars93[Cars93$distances== min(Cars93$distances) ,]
min
medium
max
factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
return(output)
}
factory.run()
factory.run()
factory.run()
factory.run()
factory.run()
gmp <- read.table(file="https://raw.githubusercontent.com/SergeyMirvoda/MD-DA-2018/master/data/gmp.dat")
gmp
gmp <- read.table(file="https://raw.githubusercontent.com/SergeyMirvoda/MD-DA-2018/master/data/gmp.dat")
gmp
gmp <- read.table(file="https://raw.githubusercontent.com/SergeyMirvoda/MD-DA-2018/master/data/gmp.dat")
View(gmp)
gmp <- read.table(file="https://raw.githubusercontent.com/SergeyMirvoda/MD-DA-2018/master/data/gmp.dat")
gmp$pop <- gmp$gmp/gmp$pcgmp
View(gmp)
#Загрузите данные в датафрейм. Адрес: github    https://raw???путь_к_файлу_найдите_сами???/data/gmp.dat
gmp <- read.table(file="https://raw.githubusercontent.com/SergeyMirvoda/MD-DA-2018/master/data/gmp.dat")
gmp$pop <- gmp$gmp/gmp$pcgmp
View(gmp)
estimate.scaling.exponent <- function(a, y0=6611, response=gmp$pcgmp,
predictor = gmp$pop, maximum.iterations=100, deriv.step = 1/100,
step.scale = 1e-12, stopping.deriv = 1/100) {
mse <- function(a) { mean((response - y0*predictor^a)^2) }
for (iteration in 1:maximum.iterations) {
deriv <- (mse(a+deriv.step) - mse(a))/deriv.step
a <- a - step.scale*deriv
if (abs(deriv) <= stopping.deriv) { break() }
}
fit <- list(a=a,iterations=iteration,
converged=(iteration < maximum.iterations))
return(fit)
}
#Пример вызова с начальным занчением a
a.before.del<-estimate.scaling.exponent(0.15);
a.before.del
#Загрузите данные в датафрейм. Адрес: github    https://raw???путь_к_файлу_найдите_сами???/data/gmp.dat
gmp <- read.table(file="https://raw.githubusercontent.com/SergeyMirvoda/MD-DA-2018/master/data/gmp.dat")
gmp$pop <- gmp$gmp/gmp$pcgmp
View(gmp)
estimate.scaling.exponent <- function(a, y0=6611, response=gmp$pcgmp,
predictor = gmp$pop, maximum.iterations=100, deriv.step = 1/100,
step.scale = 1e-12, stopping.deriv = 1/100) {
mse <- function(a) { mean((response - y0*predictor^a)^2) }
for (iteration in 1:maximum.iterations) {
deriv <- (mse(a+deriv.step) - mse(a))/deriv.step
a <- a - step.scale*deriv
if (abs(deriv) <= stopping.deriv) { break() }
}
fit <- list(a=a,iterations=iteration,
converged=(iteration < maximum.iterations))
return(fit)
}
#Пример вызова с начальным занчением a
a.before.del<-estimate.scaling.exponent(0.15);
a.before.del
#С помошью полученного коэффициента постройте кривую (функция curve) зависимости
curve((y0=6611)*x^estimate.scaling.exponent(0.15)$a,gmp$pop)
?curve
?sample
a.before.del<-estimate.scaling.exponent(0.15);
a.before.del
-sample(x = 1:366, size = 1)
-sample(x = 1:366, size = 1)
estimate.scaling.exponent(0) #a=0.1212198, 77 итераций, сходится
estimate.scaling.exponent(0.1) #a=0.1212198, 61 итерация, сходится
estimate.scaling.exponent(0.2198) #a=0.1212198, 99 итераций, сходится
estimate.scaling.exponent(0.2199) #a=0.1209941, 100 итераций, расходится
estimate.scaling.exponent(0.3) #a=-2.861204, 2 итерации, сходится
estimate.scaling.exponent(3) #a=-2.394772e+38, 2 итерации, сходится
estimate.scaling.exponent(-0.124); #a=0.1212197, 100 итераций, расходится
estimate.scaling.exponent(-0.123); #a=0.1212198, 100 итераций, расходится
estimate.scaling.exponent(-3); #a=-3, 1 итерация, сходится
estimate.scaling.exponent(0.2) #a=0.1212198, 61 итерация, сходится
factory.run()
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
return(list(steps, output))
}
factory.run(30, 20)
factory.run <- function (o.cars=1, o.trucks=1) {
factory <- matrix(c(40,1,60,3),nrow=2, dimnames=list(c("трудодни","сталь"),c("автомобили","грузовики")))
warehouse <- c(1600,70) #Доступно материалов на складе
names(warehouse) <- rownames(factory)
reserve <- c(8,1)
names(reserve) <- rownames(factory)
output <- c(o.cars, o.trucks)
names(output) <- colnames(factory)
steps <- 0 # Счётчик числа шагов цикла
repeat {
steps <- steps + 1
needed <- factory %*% output # Подсчитаем ресурсы, которые нам нужны для производства требуемого кол-ва машин
message(steps)
print(needed)
# Если ресурсов достаточно и остаток меньше или равен резерву, то мы произвели максимум возможного.
# Нужно прекращать
if (all(needed <= warehouse) && all((warehouse - needed) <= reserve)) {
break()
}
# Если заявка слишком большая и ресурсов недостаточно, уменьшим её на 10%
if (all(needed > warehouse)) {
output <- output * 0.9
next()
}
# Если всё наоброт, то увеличим на 10%
if (all(needed < warehouse)) {
output <- output * 1.1
next()
}
# Если мы потребили одного ресурса слишком много, а другого недостаточно,
# то увеличим план на случайную величину
output <- output * (1+runif(length(output),min=-0.1,max=0.1))
}
return(list(steps, needed, output))
}
factory.run(30, 20)
knitr::opts_chunk$set(echo = TRUE)
html<-readLines("forbes.htm" )
html<-readLines("./forbes.htm" )
html<-readLines(file="./forbes.htm" )
html<-readLines(file="forbes.htm" )
html<-readLines("forbes.htm" )
forbes<-readLines("forbes.htm" )
html<-readLines("/home/dmitry/Документы/Учеба/MD-DA-2018-Results/Labs/lab3/forbes.htm" )
length(html)
sum(nchar(html))
incomes<-grep("[$](\\d+,*\\d*) B", html)
incomes
forbes[incomes]
html[incomes]
length(incomes)
knitr::opts_chunk$set(echo = TRUE)
html<-readLines("/home/dmitry/Документы/Учеба/MD-DA-2018-Results/Labs/lab3/forbes.htm" )
length(html)
sum(nchar(html))
incomes<-grep("[$](\\d+,*\\d*) B", html)
incomes
html[incomes]
length(incomes)
incomes.positions<-regexpr("[$](\\d+,*\\d*) B", html)
incomes.value<-regmatches(html,incomes.positions)
incomes.positions
incomes.value
length(incomes.value)
incomes.value[1]
length(incomes.value[incomes.value=="$72 B"])
incomes.value[3]
length(unique(incomes.value))
worths<-as.numeric(sub(",",".", regmatches(emoluments.value, regexpr('(\\d+,*\\d*)',incomes.value))))*10^9
sum(worths[1:20])/sum(worths)
knitr::opts_chunk$set(echo = TRUE)
html<-readLines("/home/dmitry/Документы/Учеба/MD-DA-2018-Results/Labs/lab3/forbes.htm" )
length(html)
sum(nchar(html))
incomes<-grep("[$](\\d+,*\\d*) B", html)
incomes
html[incomes]
length(incomes)
incomes.positions<-regexpr("[$](\\d+,*\\d*) B", html)
incomes.value<-regmatches(html,incomes.positions)
incomes.positions
incomes.value
length(incomes.value)
incomes.value[1]
length(incomes.value[incomes.value=="$72 B"])
incomes.value[3]
length(unique(incomes.value))
worths<-as.numeric(sub(",",".", regmatches(incomes.value, regexpr('(\\d+,*\\d*)',incomes.value))))*10^9
worths
knitr::opts_chunk$set(echo = TRUE)
html<-readLines("/home/dmitry/Документы/Учеба/MD-DA-2018-Results/Labs/lab3/forbes.htm" )
length(html)
sum(nchar(html))
incomes<-grep("[$](\\d+,*\\d*) B", html)
incomes
html[incomes]
length(incomes)
incomes.positions<-regexpr("[$](\\d+,*\\d*) B", html)
incomes.value<-regmatches(html,incomes.positions)
incomes.positions
incomes.value
length(incomes.value)
incomes.value[1]
length(incomes.value[incomes.value=="$72 B"])
incomes.value[3]
length(unique(incomes.value))
worths<-as.numeric(sub(",",".", regmatches(incomes.value, regexpr('(\\d+,*\\d*)',incomes.value))))*10^9
worths
is.vector(worths)
typeof(worths)
length(worths[worths>10^9])
worths[which(worths==max(worths))]
median(worths)
mean(worths)
length(worths[worths>5*10^9])
length(worths[worths>10*10^9])
length(worths[worths>25*10^9])
sum(worths)
sum(worths[1:5])/sum(worths)
sum(worths[1:20])/sum(worths)
